#include <stdio.h>
#include <NuMicro.h> 

// Gerekli kütüphaneler ekleniyor. NuMicro kütüphanesi, NuMicro mikrodenetleyicilerin donanim bilesenlerine erisim saglar.

float data; 
float data1;

// ADC (Analog to Digital Converter) sonucunu saklamak için kullanilan degiskenler.

int32_t i32ConversionData = 0;

// ADC dönüsümünden elde edilen veriyi saklayacak bir tamsayi degiskeni.

void EADC_Init(void) 
{
    EADC_Open(EADC, EADC_CTL_DIFFEN_SINGLE_END); 
    // ADC'yi tek uçlu (single-end) modda açiyoruz. Tek uçlu mod, sadece bir ADC kanali kullanarak voltaj ölçümü yapmamiza olanak tanir.

    EADC_ConfigSampleModule(EADC, 0, EADC_SOFTWARE_TRIGGER, 14); 
    // ADC modülünü yapilandiriyoruz. 14. kanalda, yazilim tetikleyicisi ile ADC ölçümü yapilacak sekilde ayarlandi.
}

void PWM_Init(void) 
{
    for (int i = 0; i < 8; i++) 
    {
        BPWM_ConfigOutputChannel(BPWM0, i, 50000, 50.0f); 
        // BPWM0'nin her kanali için 50 kHz frekans ve %50 duty cycle ile yapilandiriyoruz. Duty cycle, çikis sinyalinin ne kadar süre "yüksek" oldugudur.
        BPWM_ConfigOutputChannel(BPWM1, i, 50000, 50.0f); 
        // BPWM1 kanallari için de ayni ayar yapiliyor.
    }

    BPWM_Start(BPWM0, 0xFF); 
    // BPWM0 modülündeki tüm 8 kanali baslatiyoruz (0xFF: tüm kanallari temsil eder).
    BPWM_EnableOutput(BPWM0, 0xFF); 
    // BPWM0'de tüm çikislari etkinlestiriyoruz.

    BPWM_Start(BPWM1, 0xFF); 
    // BPWM1 modülündeki tüm 8 kanali baslatiyoruz.
    BPWM_EnableOutput(BPWM1, 0xFF); 
    // BPWM1'de tüm çikislari etkinlestiriyoruz.
}

void SYS_Init(void) 
{
    SYS_UnlockReg(); 
    // Korunan sistem kayitlarini açiyoruz (kilidi kaldiriyoruz) böylece sistem ayarlari yapilabilir.

    CLK_EnableXtalRC(CLK_PWRCTL_LIRCEN_Msk | CLK_PWRCTL_HIRCEN_Msk | CLK_PWRCTL_HIRC48EN_Msk);
    // Düsük frekansli (LIRC) ve yüksek frekansli (HIRC, HIRC48) osilatörleri etkinlestiriyoruz.

    CLK_WaitClockReady(CLK_STATUS_LIRCSTB_Msk | CLK_STATUS_HIRCSTB_Msk | CLK_STATUS_HIRC48STB_Msk);
    // Osilatörlerin hazir olmasini bekliyoruz.

    CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC, CLK_CLKDIV0_HCLK(1)); 
    // Sistem saatini yüksek frekansli osilatöre (HIRC) ayarliyoruz ve bölme katsayisini 1 olarak belirliyoruz.

    CLK->PCLKDIV = (CLK_PCLKDIV_APB0DIV_HCLK | CLK_PCLKDIV_APB1DIV_HCLK); 
    // APB0 ve APB1 saatlerini HCLK ile ayni olacak sekilde ayarliyoruz.

    CLK_EnableModuleClock(BPWM0_MODULE); 
    CLK_EnableModuleClock(BPWM1_MODULE); 
    CLK_EnableModuleClock(EADC_MODULE); 
    CLK_EnableModuleClock(FMCIDLE_MODULE); 
    CLK_EnableModuleClock(ISP_MODULE); 
    CLK_EnableModuleClock(WDT_MODULE); 
    CLK_EnableModuleClock(WWDT_MODULE); 
    // Çesitli modüller için saat sinyallerini etkinlestiriyoruz (BPWM, ADC, WDT, ISP, vs.).

    CLK_SetModuleClock(BPWM0_MODULE, CLK_CLKSEL2_BPWM0SEL_PCLK0, MODULE_NoMsk); 
    CLK_SetModuleClock(BPWM1_MODULE, CLK_CLKSEL2_BPWM1SEL_PCLK1, MODULE_NoMsk); 
    CLK_SetModuleClock(EADC_MODULE, MODULE_NoMsk, CLK_CLKDIV0_EADC(1)); 
    CLK_SetModuleClock(WDT_MODULE, CLK_CLKSEL1_WDTSEL_LIRC, MODULE_NoMsk); 
    CLK_SetModuleClock(WWDT_MODULE, CLK_CLKSEL1_WWDTSEL_HCLK_DIV2048, MODULE_NoMsk); 
    // Modüller için saat kaynaklarini ve bölme oranlarini belirliyoruz.

    SystemCoreClockUpdate(); 
    // Sistem çekirdek saatini güncelliyoruz.

SYS->GPA_MFPH = 0x00000000;
    SYS->GPA_MFPL = SYS_GPA_MFPL_PA7MFP_BPWM1_CH2 | SYS_GPA_MFPL_PA6MFP_BPWM1_CH3 | SYS_GPA_MFPL_PA5MFP_BPWM0_CH5 | SYS_GPA_MFPL_PA4MFP_BPWM0_CH4 | SYS_GPA_MFPL_PA3MFP_BPWM0_CH3 | SYS_GPA_MFPL_PA2MFP_BPWM0_CH2 | SYS_GPA_MFPL_PA1MFP_BPWM0_CH1 | SYS_GPA_MFPL_PA0MFP_BPWM0_CH0;
    SYS->GPB_MFPH = SYS_GPB_MFPH_PB14MFP_EADC0_CH14;
    SYS->GPB_MFPL = 0x00000000;
    SYS->GPC_MFPH = 0x00000000;
    SYS->GPC_MFPL = 0x00000000;
    SYS->GPD_MFPH = 0x00000000;
    SYS->GPD_MFPL = 0x00000000;
    SYS->GPE_MFPH = 0x00000000;
    SYS->GPE_MFPL = 0x00000000;
    SYS->GPF_MFPH = 0x00000000;
    SYS->GPF_MFPL = SYS_GPF_MFPL_PF1MFP_ICE_CLK | SYS_GPF_MFPL_PF0MFP_ICE_DAT;
    SYS->GPG_MFPH = 0x00000000;
    SYS->GPG_MFPL = 0x00000000;
    SYS->GPH_MFPH = 0x00000000;
    SYS->GPH_MFPL = 0x00000000;
    
		SYS_LockReg(); 
    // Korunan sistem kayitlarini kilitliyoruz (degisiklik yapilmasini önlemek için).
}

void EADC_FunctionTest(void) 
{
    EADC_START_CONV(EADC, BIT0); 
    // ADC'yi baslatiyoruz ve 0. modülden örneklemeyi tetikliyoruz.

    i32ConversionData = EADC_GET_CONV_DATA(EADC, 0); 
    // ADC'den veriyi aliyoruz ve i32ConversionData degiskenine atiyoruz.

    data = ((float)i32ConversionData * 3.3f) / 4095.0f; 
    // ADC'den gelen ham veriyi voltaj degerine çeviriyoruz. ADC'nin çözünürlügü 12 bit oldugundan, maksimum deger 4095'dir. 3.3V'a oranli olarak çeviri yapiliyor.

    if (data > 3.3f) data = 3.3f; 
    if (data < 0.0f) data = 0.0f; 
    // Voltaj degerini 0 ile 3.3V araliginda sinirliyoruz.

    data1 = data; 
    float duty1 = data1 * 100.0f / 3.3f; 
    // Voltaj degerini PWM duty cycle yüzdesine çeviriyoruz (0-100 arasi).

    for (int i = 0; i <= 6; i++) 
    {
        if (i % 2 == 0) 
        {
            BPWM_ConfigOutputChannel(BPWM0, i, 50000, duty1); 
            // Diger çift numarali kanallar için PWM duty cycle ayarlaniyor.
					
	    BPWM_ConfigOutputChannel(BPWM0, i, 50000, 100.0f - duty1); 
            // 6. pin için duty cycle ters ayarlaniyor.
        }
        else 
        {
            BPWM_ConfigOutputChannel(BPWM0, i, 50000, 100.0f - duty1); 
            // Tek numarali kanallar için ters duty cycle ayarlaniyor.
					
	    BPWM_ConfigOutputChannel(BPWM0, i, 50000, duty1); 
            // 7. pin için duty cycle normal ayarlaniyor.
        }
    }

    for (int j = 2; j <= 5; j++) 
    {
        if (j % 2 == 0) 
        {
            BPWM_ConfigOutputChannel(BPWM1, j, 50000, duty1); 
            // BPWM1 için de çift kanallar için duty ayarlaniyor.
        }
        else 
        {
            BPWM_ConfigOutputChannel(BPWM1, j, 50000, 100.0f - duty1); 
            // Tek kanallar için ters duty cycle ayarlaniyor.
        }
    }
}

int32_t main(void) 
{
    SYS_Init(); 
    // Sistem baslatma fonksiyonunu çagiriyoruz.

    EADC_Init(); 
    // ADC'yi baslatiyoruz.

    PWM_Init(); 
    // PWM'i baslatiyoruz.

    while (1) 
    {
        EADC_FunctionTest(); 
        // ADC'den veriyi okuyup PWM çikislarini ayarlayan fonksiyonu çagiriyoruz.

        CLK_SysTickLongDelay(50000); 
        // 50 ms'lik bir gecikme ekliyoruz.
    }
}